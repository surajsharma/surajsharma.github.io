---
import type { SiteMeta } from "@/data/siteMeta";
import BaseHead from "@/components/BaseHead";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";
import SkipLink from "@/components/SkipLink";
import { siteConfig } from "@/site-config";

interface Props {
	meta: SiteMeta;
}

const {
	meta: { title, description = siteConfig.description, ogImage, articleDate },
} = Astro.props;
---

<html lang={siteConfig.lang}>
	<head>
		<BaseHead title={title} description={description} ogImage={ogImage} articleDate={articleDate} />
		<script define:vars={{ siteConfig }}>
			const root = document.documentElement;
			const colorThemeMetaTag = document.querySelector("meta[name='theme-color']");

			// get user preference of dark mode, 1st local storage, 2nd browser
			function getThemePreference() {
				if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
					return localStorage.getItem("theme");
				}
				return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
			}

			const isDark = getThemePreference() === "dark";

			// watch document element class attribute and update user preference when it changes.
			const observer = new MutationObserver(() => {
				const rootIsDark = root.classList.contains("dark");
				// set the meta attribute
				colorThemeMetaTag.setAttribute(
					"content",
					siteConfig[rootIsDark ? "themeColorDark" : "themeColorLight"]
				);
				// store user preference
				if (typeof localStorage !== "undefined") {
					localStorage.setItem("theme", rootIsDark ? "dark" : "light");
				}
			});
			observer.observe(root, { attributeFilter: ["class"] });

			// initailse root class attribute
			root.classList.toggle("dark", isDark);
		</script>

		<script lang="ts">
			!(function () {
				// all links open in own tab
        const links = Array.from(document?.body?.getElementsByTagName("a")??[]);
				for (const link of links) {
					if (link?.href && new URL(link.href).origin !== location.origin) {
						link.setAttribute("target", "_blank");
					}
				}
			})();
		</script>
	</head>
	<body>
		<SkipLink />
		<Header />
		<main id="main" class="flex flex-col justify-center items-center flex-1">
		  <slot />
		</main>
		<Footer />
		<script type="application/ld+json" set:html={JSON.stringify({
			"@context": "https://schema.org",
			"@type": "Person",
			"name": "Suraj Sharma",
			"url": "https://www.evenzero.in",
			"image": "https://www.evenzero.in/images/e0_4.png",
			"sameAs": [
				"https://github.com/surajsharma",
				"https://twitter.com/surajsharmafyi",
				"https://www.linkedin.com/in/surajsharma"
			],
			"jobTitle": "Software Engineer",
			"worksFor": {
				"@type": "Organization",
				"name": "Evenzero"
			},
			"knowsAbout": [
				"Software Engineering",
				"Frontend Development",
				"Backend Development",
				"Microservices",
				"Cloud Computing",
				"API Development",
				"React",
				"Node.js",
				"TypeScript"
			],
			"description": "Full-stack software engineer with 10,000+ hours of experience in shipping pixel-perfect frontends, highly available APIs, scalable microservices, and performant operations."
		})} />
	</body>
</html>
